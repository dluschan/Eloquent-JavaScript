:chap_num: 12
:prev_link: 11_language
:next_link: 13_dom

= JavaScript и браузер =

[chapterquote="true"]
[quote,Дуглас Крокфорд,Язык программирования JavaScript (видеолекция)]
____
Браузер – крайне враждебная программная среда.
____

(((Crockford+++,+++ Douglas)))(((JavaScript,history of)))(((World Wide Web)))Следующая часть книги расскажет о веб-((браузер))ах. Без них не было бы JavaScript. А если бы и был, никто бы не обратил на него внимания.

(((decentralization)))(((compatibility)))Технологии веба с самого начала были децентрализованными – не только технически, но и с точки зрения их эволюции. Различные разработчики браузеров добавляли новую функциональность «по случаю», непродуманно, и часто эта функциональность обретала поддержку в других браузерах и становилась ((стандарт))ом.

Это и благословление и проклятие. С одной стороны, здорово не иметь контролирующего центра, чтобы технология развивалась различными сторонами, иногда ((сотрудничающими)), иногда конкурирующими. С другой – бессистемное развитие языка привело к тому, что результат не является ярким примером внутренней ((согласованности)). Некоторые части привносят путаницу и беспорядок.

== Сети и Интернет ==

Компьютерные ((сети)) появились в 1950-х. Если вы проложите кабель между двумя или несколькими компьютерами и разрешите им передавать данные, вы может делать много удивительных вещей. А если связь двух машин в одном здании позволяет делать много разного, то связь компьютеров по всей планете должна позволять ещё больше. Технология, позволяющая это сделать, была создана в 1980-х, и получившаяся сеть зовётся _((Интернет))ом_. И она оправдала ожидания.

Компьютер может использовать эту сеть, чтобы кидаться битами в другой компьютер. Чтобы ((общение)) вышло эффективным, оба компьютера должны знать, что эти биты означают. Значение любой заданной последовательности битов зависит от того, что пытаются ими выразить, и какой механизм ((кодирования)) используется.

Стиль общения по ((сети)) описывает _сетевой ((протокол))_. Есть протоколы для отправки е-мейлов, для получения е-мейлов, для распространения файлов и даже для контроля над компьютерами, заражёнными вредоносным софтом.

К примеру, простой протокол ((чат))а может состоять из одного компьютера, отправляющего биты, представляющие текст “ЧАТ?” на другой, а второго отвечающего текстом “ОК!”, для подтверждения того, что он понял протокол. Дальше они могут перейти к отправке друг другу текстов, чтения полученных текстов и вывода их на экран.

(((layering)))(((stream)))(((ordering)))Большинство протоколов построено на основе других протоколов. Наш протокол чата из примера рассматривает сеть как потоковое устройство, в которое можно вводить биты и заказывать их приход на конкретный адрес в правильном порядке. А обеспечение этого процесса – само по себе является сложной задачей.

indexsee:[Transmission Control Protocol,TCP]
(((TCP)))_Transmission Control Protocol_ (TCP) – ((протокол)), решающий эту задачу. Все устройства, подключённые к Интернету, “говорят” на нём, и большинство общения в ((Интернете)) построено на его основе.

(((listening (TCP))))((Соединение)) по TCP работает так: один компьютер ждёт, или _слушает_, пока другие не начнут с ним говорить. Чтобы можно было слушать разные виды общения в одно и то же время, для каждого из них назначается номер (называемый _((порт))ом_). Большинство ((протокол))ов устанавливают порт, используемый по умолчанию. К примеру, если мы отправляем е-мейл по протоколу ((SMTP)), компьютер, через который мы его шлём, должен слушать порт 25.

Тогда другой компьютер может установить ((соединение)), связавшись с компьютером назначения по правильному порту. Если машина назначения доступна, и она слушает этот порт, соединение устанавливается. Слушающий компьютер зовётся _((сервер))ом_, а соединяющийся – _((клиент))ом_.

Такое соединение работает как двусторонняя ((труба)), по которой текут биты – обе машины могут помещать в неё данные. Когда биты переданы, другая машина может их прочесть. Это удобная модель. Можно сказать, что ((TCP)) обеспечивает ((абстракцию)) сети.

[[web]]
== Веб ==

_((World Wide Web))_, всемирная паутина (это не то же самое, что весь ((Интернет)) в целом) – набор ((протокол))ов и форматов, позволяющий нам посещать странички через браузер. Веб, “паутина” в названии обозначает, что страницы можно легко связать друг с другом, в результате чего образуется гигантская ((сеть))-паутина, по которой движутся пользователи.

indexsee:[Hypertext Transfer Prototol,HTTP]
(((HTTP)))Чтобы добавить в Веб содержимое, вам нужно соединить машину с ((Интернет))ом и заставить её слушать 80 порт, используя протокол передачи гипертекста, _Hypertext Transfer Protocol_ (HTTP). Он позволяет другим компьютерам запрашивать документы по ((сети)).

indexsee:[Uniform Resource Locator,URL]
(((URL)))Каждый ((документ)) имеет имя в виде универсального локатора ресурсов, _Universal Resource Locator_ (URL), который выглядит примерно так:

----
  http://eloquentjavascript.net/12_browser.html
 |      |                      |               |
 протокол       сервер               путь
----

(((HTTPS)))Первая часть говорит нам, что URL использует ((протокол)) HTTP (в отличие от, скажем, зашифрованного HTTP, который записывается как _https://_). Затем идёт часть, определяющая, с какого ((сервер))а мы запрашиваем документ. Последняя – строка пути, определяющая конкретный документ или _((ресурс))_.

У каждой машины, присоединённой к Интернету, есть свой _((IP адрес))_, который выглядит как `37.187.37.82`. Его иногда можно использовать вместо имени сервера в ((URL)). Но цифры сложнее запоминать и печатать, чем имена – поэтому обычно вы регистрируете _((домен))ное имя_, которое указывает на конкретную машину (или набор машин). Я зарегистрировал _eloquentjavascript.net_, указывающий на IP-адрес машины, которую я контролирую, поэтому можно использовать этот адрес для предоставления веб-страниц.
Each machine connected to the Internet gets a unique _((IP address))_,
which looks something like `37.187.37.82`. You can use these directly as the server part of a ((URL)). But lists of more or less random
numbers are hard to remember and awkward to type, so you can instead
register a _((domain)) name_ to point toward a specific machine or
set of machines. I registered _eloquentjavascript.net_ to point at the
IP address of a machine I control and can thus use that domain name
to serve web pages.

(((browser)))Если вы введёте указанный URL в ((адресную строку)) браузера, он попробует запросить и показать ((документ)), находящийся по этому URL. Во-первых, браузеру надо выяснить, куда ссылается домен _eloquentjavascript.net_. Затем, используя протокол ((HTTP)), он соединяется с сервером по этому адресу, и спрашивает его ресурс по имени _/12_browser.html_.

В link:17_http.html#http[главе 17] мы подробнее рассмотрим протокол HTTP.

== HTML ==

indexsee:[Hypertext Markup Language,HTML]
(((HTML)))HTML, или язык разметки гипертекста, _Hypertext Markup Language_ – формат документа, использующийся для веб-страниц. HTML содержит ((текст)) и _((тег))и_, придающие тексту структуру, описывающие такие вещи, как ссылки, параграфы и заголовки.

Простой HTML документ может выглядеть так:

[source,text/html]
----
<!doctype html>
<html>
  <head>
    <title>Моя домашняя страничка</title>
  </head>
  <body>
    <h1>Моя домашняя страничка</h1>
    <p>Привет, я Марейн и это моя домашняя страничка.</p>
    <p>А ещё я книжку написал! Читайте её
      <a href="http://eloquentjavascript.net">здесь</a>.</p>
  </body>
</html>
----

ifdef::book_target[]

This is what such a document would look like in the browser:

image::img/home-page.png[alt="My home page",width="6.3cm"]

endif::book_target[]

(((angle brackets)))Теги, окружённые угловыми скобками `<` и `>`, описывают информацию о ((структуре)) документа. Всё остальное – просто ((текст)).

(((doctype)))(((version)))Документ начинается с `<!doctype html>`, и это говорит браузеру, что его надо интерпретировать как _современный_ HTML, в отличие от разных диалектов прошлого.

(((head (HTML tag))))(((body (HTML tag))))(((title (HTML tag))))(((h1 (HTML tag))))(((p (HTML tag))))У HTML документов есть заголовок и тело. Заголовок содержит информацию _о_ документе, а тело – сам документ. В нашем случае мы объявили, что название страницы будет “Моя домашняя страничка”, затем описали документ, содержащий заголовок (`<h1>` означает “heading 1”, т.е. “заголовок 1”, а теги с `<h2>` по `<h6>` представляют заголовки меньших размеров) и два ((параграф))а (`<p>`).

(((href attribute)))(((a (HTML tag))))У тегов может быть несколько форм. ((Элемент)) вроде тела, параграфа и ссылки начинается _((открывающим тегом))_, например, `<p>` и заканчивается _((закрывающим))_, например, `</p>`. Некоторые открывающие теги, типа ((ссылки)) `<a>`, содержат дополнительную информацию в виде пар `имя="значение"`. Она называется _((атрибут))ами_. В нашем случае адрес ссылки задан как `href="http://eloquentjavascript.net"`, где `href` означает “hypertext reference”, т.е. “гипертекстовая ссылка”.

(((src attribute)))(((self-closing tag)))(((img (HTML tag))))Некоторые ((тег))и ничего не окружают, и их не надо закрывать. Пример – тег картинки `<img src="http://example.com/image.jpg">`, который показывает ((картинку)), находящуюся по заданному адресу URL.

(((escaping,in HTML)))Чтобы включать в текст документа ((угловые скобки)), нужно пользоваться специальной записью, так как в HTML они имеют особое значение. Открывающая скобка (она же знак «меньше») записывается как `&lt;` («less than», т.е. «меньше, чем»), закрывающая — `&gt;` (“greater that”, т.е. «больше, чем»). В HTML амперсанд `&`, за которым идёт слово и точка с запятой, зовётся _((сущность))ю_ и заменяется символом, который кодируется этой последовательностью.

(((backslash character)))(((ampersand character)))(((double-quote character)))Это похоже на обратные слэши, используемые в строках JavaScript. Из-за специального значения амперсанда его самого в текст можно включать в виде `&amp;`. В атрибуте, заключаемом в двойные кавычки, символ кавычек записывается как `&quot;`.

(((error tolerance)))(((parsing)))HTML разбирается парсером довольно либерально по отношению к возможным ошибкам. Если какие-то теги пропущены, браузер их воссоздаёт. Как именно это происходит, записано в стандартах, поэтому можно ожидать, что все современные браузеры будут делать это одинаково.

Следующий документ будет обработан так же, как и предыдущий:

[source,text/html]
----
<!doctype html>

<title>Моя домашняя страничка</title>

<h1>Моя домашняя страничка</h1>
<p>Привет, я Марейн и это моя домашняя страничка.
<p>А ещё я книжку написал! Читайте её
  <a href=http://eloquentjavascript.net>здесь</a>.
----

(((title (HTML tag))))(((head (HTML tag))))(((body (HTML tag))))(((html (HTML tag))))Отсутствуют теги `<html>`, `<head>` и `<body>`. Браузер знает, что `<title>` должен быть в `<head>`, а `<h1>` — в `<body>`. Кроме того, параграфы не закрыты, поскольку открытие нового параграфа или конец документа означают их принудительное закрытие. Также адрес не заключён в кавычки.

В этой книге мы опустим теги `<html>`, `<head>` и `<body>` для краткости. Но я _буду_ закрывать теги, и заключать атрибуты в кавычки.

(((browser)))Также обычно я буду опускать ((doctype)). Я не советую делать это вам – браузеры иногда могут творить странные вещи, когда вы их опускаете. Считайте, что они присутствуют в примерах по умолчанию.

[[script_tag]]
== HTML и JavaScript ==

(((JavaScript,in HTML)))(((script (HTML tag))))В контексте нашей книги самый главный тег ((HTML)) — `<script>`. Он позволяет включать в документ программу на JavaScript.

[source,text/html]
----
<h1>Внимание, тест.</h1>
<script>alert("Привет!");</script>
----

(((alert function)))(((timeline)))Такой скрипт запустится сразу, как только браузер встретит тег `<script>` при разборе HTML. На странице появится диалог-предупреждение.

(((src attribute)))Включать большие программы в HTML непрактично. У тега `<script>` есть атрибут `src`, чтобы запрашивать файл со скриптом (текст, содержащий программу на JavaScript) с адреса URL.

[source,text/html]
----
<h1>Внимание, тест.</h1>
<script src="code/hello.js"></script>
----

В файле _code/hello.js_ содержится та же простая программа `alert('Привет!');`. Когда страница ссылается на другой URL и включает его в себя, браузер подгружает этот файл и включает их в страницу.

(((script (HTML tag))))(((closing tag)))Тег `script` всегда надо закрывать при помощи `</script>`, даже если он не содержит кода и ссылается на файл скрипта. Если вы забудете это сделать, оставшаяся часть страницы будет обработана как скрипт.

(((button (HTML tag))))(((onclick attribute)))Некоторые атрибуты тоже могут содержать программу JavaScript. У тега `<button>` (на странице он выглядит как кнопка) есть атрибут `onClick`, и его содержимое будет запущено, когда по кнопке щёлкают мышкой.

[source,text/html]
----
<button onclick="alert('Boom!');">НЕ ЖМИ</button>
----

(((single-quote character)))(((escaping,in HTML)))Заметьте, что я использовал одинарные кавычки для строки в атрибуте `onclick`, поскольку двойные кавычки уже используются в самом атрибуте. Можно было бы использовать `&quot`;, но это бы затруднило чтение.

== Песочница ==

(((malicious script)))(((World Wide Web)))(((browser)))(((website)))(((security)))Запуск скачанных из ((Интернет))а программ небезопасен. Вы не знаете ничего о тех людях, которые делали посещаемые вами сайты, и они не всегда доброжелательны. Запуская программы злых людей, вы можете заразить компьютер ((вирус))ами, потерять свои данные или дать доступ к своим аккаунтам третьим лицам.

Но привлекательность веба в том, что по нему можно сёрфить без обязательного ((доверия)) всем посещаемым страницам. Поэтому браузеры сильно ограничивают то, что может сделать программа JavaScript. Она не может открывать файлы на компьютере, или менять что-либо, не связанное со страницей, в которую она встроена.

(((isolation)))Изолированное таким образом окружение называется _((песочницей))_ – в том смысле, что программа безобидно играется в песочнице. Представляйте, однако, эту песочницу как клетку из толстых стальных прутьев.

Сложность в создании песочницы – позволять программам делать достаточно много, чтобы они были полезными, при этом ограничивая их от совершения опасных действий. Много из того, что делает пользователь, например общение с другими серверами или чтение содержимого ((буфер))а обмена, можно использовать для нарушения ((приватности)).

(((leak)))(((exploit)))(((security)))Время от времени кто-то придумывает способ обойти ограничения ((браузер))а и сделать что-то вредное, от утечки некоей приватной информации до полного контроля над компьютером, где запущен скрипт. Разработчики исправляют эту дырку в браузере, и снова всё хорошо – до появления следующей проблемы, которая, можно надеяться, будет опубликована, и не тайно использоваться правительством или ((мафией)).

== Совместимость и браузерные войны ==

(((Microsoft)))(((World Wide Web)))На ранних стадиях развития Веба браузер по имени ((Mosaic)) занимал большую часть рынка. Через несколько лет баланс сместился в сторону ((Netscape)), который затем был сильно потеснён браузером ((Internet Explorer)) от Microsoft. В любой момент превосходства одного из ((браузер))ов его разработчики позволяли себе в одностороннем порядке изобретать новые свойства Веба. Так как большинство людей использовали один и тот же браузер, ((сайт))ы просто начинали использовать эти свойства, не обращая внимания на остальные браузеры.

Это были тёмные века ((совместимости)), которые иногда называли _((войнами браузеров))_. Веб-разработчики сталкивались с двумя или тремя несовместимыми платформами. Кроме того, браузеры около 2003 года были полны ошибок, причём у каждого они были свои. Жизнь людей, создававших веб-страницы, была тяжёлой.

(((Apple)))(((Internet Explorer)))(((Mozilla)))Mozilla ((Firefox)), некоммерческое ответвление ((Netscape)), бросил вызов гегемонии Internet Explorer в конце 2000-х. Так как ((Microsoft)) особо не стремилась к конкуренции, Firefox отобрал солидную часть рынка. Примерно в это время Google представил свой браузер ((Chrome)), а Apple – ((Safari)). Это привело к появлению четырёх основных игроков вместо одного.

(((compatibility)))У новых игроков были более серьёзные намерения по отношению к ((стандарт))ам и больше ((инженерного)) опыта, что привело к лучшей совместимости и меньшему количеству ((баг))ов. Microsoft, видя сжатие своей части рынка, приняла эти стандарты. Если вы начинаете изучать веб-разработку сегодня – вам повезло. Последние версии основных браузеров работают одинаково и в них мало ошибок.

(((World Wide Web)))Нельзя сказать, что ситуация уже идеальная. Некоторые люди в Вебе по причинам инерционности или корпоративных правил используют очень старые ((браузер))ы. Пока они не отомрут совсем, написание веб-страниц для них потребует мистических знаний об их недостатках и причудах. Эта книга не про ((причуды)) – она представляет современный, разумный стиль ((веб-программирования)).
